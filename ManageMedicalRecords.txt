# this file is for the code
###
###
## Name : Dana Hafitha 
## ID Number : 1211234 
###
## Name : Sadeen Ryahi
## ID Number : 1211109
###
###


## the welcoming massege and openinig the files
printf "Welcome to the program!!\n\n"

## reading the tests information file name 
printf "Please insert the name of the Tests file(with the extention '.txt')\n"
read testFileName
while [ "$testFileName" !=  "medicalTest.txt" ]
do 
	printf "the tests file name is wrong please insert it again\n"
	read testFileName 
done


## reading the medical records file name 
printf "\nPlease insert the name of the records file(with the extention .txt)\n"
printf "if the file does not exits click '1' to create a new one or any other number to proceed\n"
clicked=0
read clicked
if [ "$clicked" -eq 1 ]
then 
	touch medical_records.txt
	printf "the file name is medicalRecord.txt\n"
fi 
printf "Please enter the name of the file(with extension '.txt')\n"
read recordFileName
while [ "$recordFileName" != "medicalRecord.txt" ]
do 
	printf "the records file name is wrong please insert it again\n"
	read recordFileName 
done


## the menu printing 
printf "\nLoading files: !!\n"
printf "Please choose one of the following choices to proceed(By its number):\n"
printf "1. Insert a new Record\n"
printf "2. Search a Record Based on PatientID\n"
printf "3. Search all abnormal records based on the medical test \n"
printf "4. find the Average of how many times the test has been done \n"
printf "5. Delete a specific test record \n"
printf "6. Update an existing test result\n"
printf "7. Exit\n"
choice=0
read choice
while [ "$choice" -gt 0 ]
    do
    ### the case statement for every choice 
      case "$choice" in
      #Adding a new record 
      1)echo " Enter patient ID:"
 	read patient_id
 	# checking the patient id if its 7 digits and if its only numbers 
  	checking=$(echo "$patient_id" |grep -o [0-9] | wc -l)
  	while [ "$checking" -ne 7 ]
 	do
  	   printf " the patient ID you entered is invaled Please enter again \n"
 	   read patient_id
           checking=$(echo "$patient_id" |grep -o [0-9] | wc -l)
  	done

	echo " Enter test Name:"
 	read name
 	 # checking for the name if its valid or not (does not contain numbers)
	   check=$(echo "$name" |grep -o [0-9] | wc -l )
	   while [ "$check" -gt 0 ] # the name is invalid
	   do
	       printf "the name you entered is invalid , Please insert again\n" 
	       read name
	       check=$(echo "$name" |grep -o [0-9] | wc -l )
	   done 
	   # checking for existance 
	   exists=$(grep -o -i "$name" $testFileName | wc -l )
	   while [ "$exists" -eq 0 ]
	   do 
	      printf "the Name you entered is invalid, Please enter it again \n"
	      read name
	      exists=$(grep -o -i "$name" $testFileName | wc -l )
	   done

	echo " Enter test Date (YYYY-MM):"
	read date 
	year=$(echo "$date" | cut -d"-" -f1 |grep -o [0-9] | wc -l)
		   while [ "$year" -lt 4 -a "$year" -gt 0 ]
 		   do
  			   printf " the date you enterd is invalid, enter a valid date [YYYY-MM]\n"
     			   read date
     			   year=$(echo "$date" | cut -d"-" -f1 |grep -o [0-9] | wc -l)
  		   done
 		   month=$(echo "$date" | cut -d"-" -f2 ) 
 		   month_chars=$(echo "$date" | cut -d"-" -f2 |grep -o [0-9] | wc -l)
   		   while [ "$month_chars" -gt 2 -o  "$month" -gt 12 -o "$month" -lt 1 ] 
  		   do 
    	                printf " the date you enterd is invalid, enter a valid date [YYYY-MM]\n" 
  		        read date
  		        month=$(echo "$date" | cut -d"-" -f2 ) 
 		  	month_chars=$(echo "$date" | cut -d"-" -f2 |grep -o [0-9] | wc -l) 
		   done 
	echo " Enter test Result:"
	read result
	if [ $(echo $result | grep -o [^0-9\.] | wc -l ) -ne 0 ]
	then
	     echo " Invalid test result"
	fi 

	echo " Enter Unit ( for example mg/dl , g/dl , mm Hg):"
	read unit 
	val_unit=("mg/dl" "g/dl" "mm Hg") # validate
	while [[ ! " ${val_unit[@]} " =~ "$unit" ]];
	do
	    echo " Invalid test unit , Please insert again "
	    read unit
        done
        
	echo " Enter Status ( Pending , Completed , Reviewed ):"
	read status
	while [[ "$status" =~ ^(Pending|Completed|Reviewed)$ ]];
	do
	    echo " Invalid status , Please insert again "
	    read status
	done

	new_record="$patient_id: $name, $date, $result, $unit, $status"
	echo "$new_record" >> $recordFileName
	echo " New medical test record added "
        printf "Please choose one of the following choices to proceed(By its number):\n"
	printf "1. Insert a new Record\n"
	printf "2. Search a Record Based on PatientID\n"
	printf "3. Search all abnormal records based on the medical test \n"
	printf "4. find the Average of how many times the test has been done \n"
	printf "5. Delete a specific test record \n"
	printf "6. Update an existing test result\n"
	printf "7. Exit\n"
	read choice
     ;;

      # searching based on the ID of the patient
     2)printf "Enter the patient_id you want to search for\n"
  	read patient_id

	# checking the patient id if its 7 digits and if its only numbers 
  	checking=$(echo "$patient_id" |grep -o [0-9] | wc -l)
  	while [ "$checking" -ne 7 ]
 	do
  	   printf " the patient ID you entered is invaled Please enter again \n"
 	   read patient_id
           checking=$(echo "$patient_id" |grep -o [0-9] | wc -l)
  	done

	# checking for existance in the file
	exist=$(grep "$patient_id" $recordFileName) 
	while [ "$?" -ne 0 ]
	do
	   printf " the patient ID you entered is not in the file Please enter another one \n"
	   read patient_id
	   exist=$(grep "$patient_id" $recordFileName) 
  	done

	printf "Choose from the following what you want to search for (by number)\n"
	printf "1. Search for all the tests for that patient\n"
	printf "2. Search for all the abnormal tests for that patient\n"
	printf "3. Search for all the tests for that patient in a specific range of Time\n"
	printf "4. Search for all the tests for that patient based on the test status\n"
	read subchoice 
	# checking for the choice 
	while [ "$subchoice" -lt 5 -a "$subchoice" -gt 0 ]
	do
	  case "$subchoice" in
		1)printf " the tests are :\n"
  		  grep "$patient_id" $recordFileName
  		  if [ "$?" -ne 0 ]
  		  then 
  		  	printf "there is no record for id $patient_id"
  		  fi
 		  printf "Choose another choice or choose 0 to stop searching for that patient\n\n"
 		  printf "1. Search for all the tests for that patient\n"
		  printf "2. Search for all the abnormal tests for that patient\n"
		  printf "3. Search for all the tests for that patient in a specific range of Time\n"
		  printf "4. Search for all the tests for that patient based on the test status\n"
		  read subchoice ;;
		2)printf "the abnormal Tests are \n"
 		  # grep all the tests for that patient 
		  # and for each test find the name and range of it 
 		  grep  "$patient_id" $recordFileName | while IFS= read -r i 
   		  do 
   		    range=$(echo "$i" | cut -d":" -f2 | cut -d"," -f3 | cut -d" " -f2)
   		    test=$(echo "$i" | cut -d":" -f2 | cut -d"," -f1 | cut -d" " -f2 |tr "\0" "\n" )
 		    # for each test get the range of it from the medical test file 
     		    maximum=$(grep -i "$test" $testFileName | cut -d";" -f2 | cut  -d">" -f2 | cut -d"<" -f2|cut -d" " -f2) 
       		    minimum=$(grep -i "$test" $testFileName | cut -d";" -f2 | cut  -d">" -f2 | cut -d"," -f1|cut -d" " -f2)
 		   # there are two cases to the minimum 
  		   # if minimum not an integer then we use only the maximum 
  		   case "$minimum" in 
  			[0-9]) ## check if range bigger or equal the maximum
         		## and if the range is lesser or equal the minimum
        		if [ $(echo "$range >= $maximum && $range <= $minimum" | bc ) -eq 1 ]
       			then 
             			# the test is abnormal 
            			echo "$i"
       			fi  ;;
   			*) # in that case we have to check the maximum only 
     			if [ $(echo "$range >= $maximum" | bc ) -eq 1 ]
        		then 
             			# the test is abnormal 
            			echo "$i"
        		fi ;;
  		   esac
  	           done
  		   printf "Choose another choice or choose 0 to stop searching \n\n"
		   printf "1. Search for all the tests for that patient\n"
		   printf "2. Search for all the abnormal tests for that patient\n"
		   printf "3. Search for all the tests for that patient in a specific range of Time\n"
		   printf "4. Search for all the tests for that patient based on the test status\n"
		   read subchoice 
                ;;
		3) printf " Enter the time range you want to find: \n"
  		   printf " Enter from what time(YYYY-MM) : \n"
 		   read inputFromTime
		   # checking if the input is valid 
		   inputfromYear=$(echo "$inputFromTime" | cut -d"-" -f1 |grep -o [0-9] | wc -l)
		   while [ "$inputfromYear" -lt 4 -a "$inputfromYear" -gt 0 ]
 		   do
  			   printf " the date you enterd is invalid, enter a valid date [YYYY-MM]\n"
     			   read inputFromTime
     			   inputfromYear=$(echo "$inputFromTime" | cut -d"-" -f1 |grep -o [0-9] | wc -l)
  		   done
 		   fromMonth=$(echo "$inputFromTime" | cut -d"-" -f2 ) 
 		   inputfromMonth=$(echo "$inputFromTime" | cut -d"-" -f2 |grep -o [0-9] | wc -l)
   		   while [ "$inputfromMonth" -gt 2 -o  "$fromMonth" -gt 12 -o "$fromMonth" -lt 1 ] 
  		   do 
    	                printf " the date you enterd is invalid, enter a valid date [YYYY-MM]\n" 
  		        read inputFromTime 
  		        inputfromMonth=$(echo "$inputFromTime" | cut -d"-" -f2 |grep -o [0-9] | wc -l) 
  		        fromMonth=$(echo "$inputFromTime" | cut -d"-" -f2 ) 
		   done 
 
  		   printf " Enter to what time :(YYYY-MM) \n"
   		   read inputToTime 
		   # checking if the input to time is valid 
		   inputToYear=$(echo "$inputToTime" | cut -d"-" -f1 |grep -o [0-9] | wc -l)
		   while [ "$inputToYear" -lt 4 -a "$inputToYear" -gt 0 ]
		   do
		       printf " the date you enterd is invalid, enter a valid date [YYYY-MM]\n"
 		       read inputToTime
 		       inputToYear=$(echo "$inputToTime" | cut -d"-" -f1 |grep -o [0-9] | wc -l)
   		   done
		   ToMonth=$(echo "$inputToTime" | cut -d"-" -f2 ) 
		   inputToMonth=$(echo "$inputToTime" | cut -d"-" -f2 |grep -o [0-9] | wc -l) 
		   while [ "$inputToMonth" -gt 2 -o  "$ToMonth" -gt 12 -o "$ToMonth" -lt 1 ] 
		   do  
      			 printf " the date you enterd is invalid, enter a valid date [YYYY-MM]\n" 
      			 read inputToTime  
      			 inputToMonth=$(echo "$inputToTime" | cut -d"-" -f2 |grep -o [0-9] | wc -l) 
      			 ToMonth=$(echo "$inputToTime" | cut -d"-" -f2 ) 
		   done 

                   #grep all the tests 
                   ## get the year of the range we have 
                   grep  "$patient_id" $recordFileName | while IFS= read -r x
                   do
			# grep the year and check if its in range print the test record
			year=$(echo $x | cut -d"," -f2 | cut -d" " -f2 | cut -d"-" -f1)
			toYear=$(echo "$inputToTime" | cut -d"-" -f1 )
			fromYear=$(echo "$inputFromTime" | cut -d"-" -f1 )
                        if [ "$year" -lt "$toYear"  -a  "$year" -gt "$fromYear" ]
                        then 
                           echo "$x"
                         elif [ "$year" -eq "$fromYear" ]
                         then
                             month=$(echo $x | cut -d"," -f2 | cut -d" " -f2 | cut -d"-" -f2)
                             # check the month 
			     fromMonth=$(echo "$inputFromTime" | cut -d"-" -f2 ) 
                           if [ "$month" -ge "$fromMonth"  ]
                           then
                               echo "$x"
                           fi
                         elif [ "$year" -eq "$toYear" ]
                         then
                            month=$(echo $x | cut -d"," -f2 | cut -d" " -f2 | cut -d"-" -f2)
                            toMonth=$(echo "$inputToTime" | cut -d"-" -f2 )
                            if [ "$month" -le "$toMonth" ]
                            then  
                                echo "$x"
                            fi
                          fi      
	            done
		  
		    printf "Choose another choice or choose 0 to stop searching \n\n"
		   printf "1. Search for all the tests for that patient\n"
		   printf "2. Search for all the abnormal tests for that patient\n"
		   printf "3. Search for all the tests for that patient in a specific range of Time\n"
		   printf "4. Search for all the tests for that patient based on the test status\n"
		   read subchoice
                   ;;
                 4)printf "Enter the test status you want to search for\n"
  		   read status
  		   while [ $status != "pending" ] && [ $status != "Pending" ] && [ $status != "completed" ] && [ $status != "Completed" ] && [ $status != "reviewed" ] && [ $status != "Reviewed" ]
  		   do
  		       printf "the status you entered is not valid , Please enter it again\n"
  		       read status
  		   done
 		   grep "$patient_id" $recordFileName | grep -i "$status"
		  printf "Choose another choice or choose 0 to stop searching \n\n"
		  printf "1. Search for all the tests for that patient\n"
	          printf "2. Search for all the abnormal tests for that patient\n"
	          printf "3. Search for all the tests for that patient in a specific range of Time\n"
	          printf "4. Search for all the tests for that patient based on the test status\n"
		   read subchoice 
		 ;;
		*)printf "Invalid choice please choose again\n"
  		  read subchoice;;
		esac
		done	
		printf " Please choose another choice: \n"
  		printf "1. Insert a new Record\n"
		printf "2. Search a Record Based on PatientID\n"
		printf "3. Search all abnormal records based on the medical test \n"
		printf "4. find the Average of how many times the test has been done \n"
		printf "5. Delete a specific test record \n"
		printf "6. Update an existing test result\n"
		printf "7. Exit\n"
		read choice
		;;
	3)printf "Enter the name of the test you want to find the abnormal for : \n"
	   read testName 
	   # checking for the name if its valid or not (does not contain numbers)
	   check=$(echo "$testName" |grep -o [0-9] | wc -l )
	   while [ "$check" -gt 0 ] # the name is invalid
	   do
	       printf "the name you entered is invalid , Please insert again\n" 
	       read testName
	       check=$(echo "$testName" |grep -o [0-9] | wc -l )
	   done 
	   # checking for existance 
	   exists=$(grep -o -i "$testName" $testFileName | wc -l )
	   while [ "$exists" -eq 0 ]
	   do 
	      printf "the Name you entered is invalid, Please enter it again \n"
	      read testName
	      exists=$(grep -o -i "$testName" $testFileName | wc -l )
	   done
	   # grep the test and for each test find the name and range of it
	        grep -i "$testName" $testFileName | while IFS= read -r i 
   		  do 
   		    # for each test get the range of it from the medical test file 
     		    maximum=$(grep -i "$testName" $testFileName | cut -d";" -f2 | cut  -d">" -f2 | cut -d"<" -f2|cut -d" " -f2) 
       		    minimum=$(grep -i "$testName" $testFileName | cut -d";" -f2 | cut  -d">" -f2 | cut -d"," -f1|cut -d" " -f2)
       		    grep -i "$testName" $recordFileName | while IFS= read -r v
   		     do 
   		      range=$(echo "$v" | cut -d":" -f2 | cut -d"," -f3 | cut -d" " -f2)
 		      # there are two cases to the minimum 
  		      # if minimum not an integer then we use only the maximum 
  		      case "$minimum" in 
  			  [0-9]) ## check if range bigger or equal the maximum
         		  ## and if the range is lesser or equal the minimum
        		  if [ $(echo "$range >= $maximum && $range <= $minimum" | bc ) -eq 1  ]
       			  then 
             			# the test is abnormal 
            			echo "$v"
       			  fi  ;;
   			  *) # in that case we have to check the maximum only 
     			  if [ $(echo "$range >= $maximum" | bc ) -eq 1 ]
        		  then 
             			# the test is abnormal 
            			echo "$v"
        		  fi ;;
  		     esac
  	            done
  	           done
  	           printf " Please choose another choice: \n"
  		   printf "1. Insert a new Record\n"
		   printf "2. Search a Record Based on PatientID\n"
		   printf "3. Search all abnormal records based on the medical test \n"
		   printf "4. find the Average of how many times the test has been done \n"
		   printf "5. Delete a specific test record \n"
		   printf "6. Update an existing test result\n"
		   printf "7. Exit\n"
		   read choice
	;;
4)printf " the Averages for each test\n"
  ## get the tests from the tests file and loop on each one to get the average 
  for test in $(grep "(" $testFileName | cut -d"(" -f2 | cut -d")" -f1)
  do
      avg=0
      sum=0
      count=$(cat -n $testFileName | wc -l)
      printf "the average for $test is "
      getResults=$(grep -i "$test" $recordFileName | cut -d"," -f3 | cut -d" " -f2)
      ## sum the results and then find the avg
      for res in $getResults
      do
      	sum=$(echo "$res"+"$sum" | bc)
      done
          avg=$(echo "$sum"/"$count" |bc )
          printf "$avg \n"
  done
  	printf " Please choose another choice: \n"
  	printf "1. Insert a new Record\n"
	printf "2. Search a Record Based on PatientID\n"
	printf "3. Search all abnormal records based on the medical test \n"
	printf "4. find the Average of how many times the test has been done \n"
	printf "5. Delete a specific test record \n"
	printf "6. Update an existing test result\n"
	printf "7. Exit\n"
	read choice
	;;
5)echo " Enter patient id to deleted"
  read patient_id
 # checking the patient id if its 7 digits and if its only numbers 
  	checking=$(echo "$patient_id" |grep -o [0-9] | wc -l)
  	while [ "$checking" -ne 7 ]
 	do
  	   printf " the patient ID you entered is invaled Please enter again \n"
 	   read patient_id
           checking=$(echo "$patient_id" |grep -o [0-9] | wc -l)
  	done

 	echo " Enter test name to delete"
 	read name
 	# checking for existance in the file
	exist=$(grep "$patient_id" $recordFileName) 
	while [ "$?" -ne 0 ]
	do
	   printf " the patient ID you entered is not in the file Please enter another one \n"
	   read patient_id
	   exist=$(grep "$patient_id" $recordFileName) 
  	done
	sed -i "/^${patient_id}: ${name}/d" $recordFileName
 	## to check
 	if [ "$?" -ne 0  ] # find id and name 
 	then 
 		echo " failed to delete record"
 	else
 		echo "record deleted "
 	fi
	printf " Please choose another choice: \n"
  	printf "1. Insert a new Record\n"
	printf "2. Search a Record Based on PatientID\n"
	printf "3. Search all abnormal records based on the medical test \n"
	printf "4. find the Average of how many times the test has been done \n"
	printf "5. Delete a specific test record \n"
	printf "6. Update an existing test result\n"
	printf "7. Exit\n"
	read choice
	;;
6)printf "Updating the test result\n"
  printf "Please Enter the Id of the patient\n"
  read id 
  ## checking validity and existance
  check=$(echo "$id" | grep -o [0-9] | wc -l)
  while [ "$check" -ne 7 ]
  do
  	printf "the Id you entered is invalid, Please enter id again \n"
  	read id
  	check=$(echo "$id" | grep -o [0-9] | wc -l)
  done
  
  exists=$(grep -o "$id" $recordFileName | wc -l )
  while [ "$exists" -eq 0 ]
  do
  	printf "the id you entered does not exists, Please enter another one \n"
  	read id
  	exists=$(grep -o "$id" $recordFileName | wc -l )
  done
  
  printf "Please Enter the test name\n"
  read name
  ## checking validity and existance
  check=$(echo "$name" | grep -o [^a-zA-Z] | wc -l)
  while [ "$check" -ne 0 ]
  do
  	printf "the name you entered is invalid, Please enter the test name again \n"
  	read name
  	check=$(echo "$name" | grep -o [^a-zA-Z] | wc -l)
  done
  
  exists=$(grep -i "$name" $testFileName | cut -d"(" -f2 | cut -d")" -f1)
  while [ "$exists" != "$name" ]
  do
  	printf "the name you entered does not exists, Please enter another one \n"
  	read name
  	exists=$(grep -i "$name" $testFileName | cut -d"(" -f2 | cut -d")" -f1)
  done
  ## checking for the record if its exists 
  recTest=$(grep "$id" $recordFileName | cut -d"," -f1 | cut -d":" -f2 )
  flag=0
  ## when there is many records for the same id CHECK
  for test in $recTest
  do
        if [ "$name" = "$test" ]
        then
            flag=1
            break
        fi
    done
  while [ "$flag" -eq 0 ]
  do
  	printf "the name you entered does not exists in the records, Please enter another one \n"
  	read name
  	recTest=$(grep "$id" $recordFileName | cut -d"," -f1 | cut -d":" -f2 )
  done
  printf "Enter the year of the test\n"
  read year 
   while [ $(echo "$year" | grep -o [^0-9] | wc -l ) -ne 0 -o  $(echo "$year" | grep -o [0-9] | wc -l ) -ne 4 ]
   do 
     printf "the year you entered is invalid, please enter the year again \n"
     read year
   done
  exists=$(grep "$id" $recordFileName |grep -i "$name" | grep "$year")
  while [ "$?" -ne 0 ]
  do
  	printf "the year you entered does not exists, Please enter another one \n"
  	read year
  	exists=$(grep "$id" $recordFileName |grep -i "$name" | grep "$year")
  done
  
  printf "Enter the Month of the test\n"
  read month 
   while [ $(echo "$month" | grep -o [^0-9] | wc -l ) -ne 0 -o  "$month" -gt 12 -a "$month" -lt 1 ]
   do 
     printf "the month you entered is invalid, please enter the month again \n"
     read month
   done
  exists=$(grep "$id" $recordFileName |grep -i "$name" | grep "$month")
  while [ $? -ne 0 ]
  do
  	printf "the month you entered does not exists, Please enter another one \n"
  	read month
  	exists=$(grep "$id" $recordFileName |grep -i "$name" | grep "$month")
  done
  printf "Enter the new result of the test \n"
  read result
  while [ $(echo "$result" | grep -o [^0-9] | wc -l ) -ne 0 ]
  do 
     printf "the result you entered is invalid, please enter the result again \n"
     read result
  done
   ## updating the result and the status if its pending make it completed
   bf_result=$(grep "$id" $recordFileName | grep -i "$name" | grep "$year"| grep "$month"  | cut -d"," -f3 | cut -d" " -f2 )
   record=$(grep "$id" $recordFileName | grep -i "$name" | grep "$year"| grep "$month") 
   new=$(echo $record | sed "s/$bf_result/$result/")
   sed -i "s|$record|$new|" $recordFileName
   echo $new
  	printf " Please choose another choice: \n"
  	printf "1. Insert a new Record\n"
	printf "2. Search a Record Based on PatientID\n"
	printf "3. Search all abnormal records based on the medical test \n"
	printf "4. find the Average of how many times the test has been done \n"
	printf "5. Delete a specific test record \n"
	printf "6. Update an existing test result\n"
	printf "7. Exit\n"
	read choice
 
;;
7)printf "Thank you for using the program \n "
  exit ;;
*)printf "the Choice you entered is invalid please choose again\n"
  read choice;;
esac
done